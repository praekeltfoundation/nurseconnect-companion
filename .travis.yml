language: elixir


script:
  # This is basically `mix test` with coverage enabled.
  - mix coveralls.json
  - mix format --check-formatted
  # This will mention FIXME and TODO comments without failing, any other issue
  # fails the build.
  - mix credo

after_success:
  - bash <(curl -s https://codecov.io/bash)

jobs:
  include:
    # Run elixir tests
    - elixir: '1.6'
      otp_release: '20.3'
      services:
        - postgresql

    # Run dialyzer
    - elixir: '1.6'
      otp_release: '20.3'
      env:
        # Env var to differentiate between builds in travis CI
        - RUN_DIALYZER=1
      cache:
        directories:
          - $HOME/.mix
          - $HOME/.pltcache
      before_script:
        - mix compile
        # Juggle cached PLTs.
        - mkdir -p ~/.pltcache
        - cp ~/.pltcache/*-dev.plt _build/dev/ || true
        - travis_wait mix dialyzer --plt
        - cp _build/dev/*-dev.plt ~/.pltcache/
        # Now that we've done the PLT dance, we can run dialyzer.
      script:
        - mix dialyzer --halt-exit-status

    # Deploy on merge to develop
    - language: python
      python: "3.6"
      sudo: required
      dist: trusty
      services: [docker]
      env:
        - IMAGE_NAME=praekeltfoundation/nurseconnect-companion:develop
        - REGISTRY_USER=praekeltorgdeploy
        # REGISTRY_PASS
        - secure: "BPynv+l1VNq4/km0y1q0lkAPLP+IPfyDmFITJlZdhFyKqT5YutWTQrXxGnfSXqyiNpF9JjuIdx6qCMN0UXt8lM3vRV6UorTHGfc+aoceXMFzcLJSZv2yafA90IUPIooDE0A7hqEvNkrkQwRG1kxY5B2HXaV5vFx+9tZr+uvaCn+MX9ihszFDLP0LT601X+cZA1mdk+9+SKvPYpxsjABOethvXj1qKkwoRTvVk3Y8fhldmuYjZhyKP/t63snL+g9kaigBQKBX+/EjjO4mOcEAGKvpOp18Lkyj0M524NRFDb3viSYMlDM42sSUK5E3y5hRV+a2hwCOqcP9J27QTjtfX1DzOyOZ20HJQTHFbliGhmf2UcHAjVbhZTJZRs1b039u//7j2h7P2MyLzOqJ1++7B2jgn2yjKw7zDRTVzt6HOZe5hyGA65Tl/M65vSqnRuXsBVX4Oo0suVZH7I4bWeblicHmN+zoF7LuvkmMMWjIAVSUgM8A21te76l5+zm3Q+iZj0CziBIAVoFcMJgi+RfPq0tbGOL2DkseXGUTJZoyIa6XAZSllXzjmaU7fSKVhPolYYYeDWS/39vWDgC0VBUgZMdl2kmuXCCWGkxuguo3qJuiBpvlWSQHaaN5SvxfcwUz35weTe2ekG5lh6VROc0hZTIkLZP3DpJ1EOx65tvOYYw="
      before_script:
        - docker pull "$IMAGE_NAME" || true
        - pip install -U pip
        - pip install -r seaworthy/requirements.txt
      script:
        - docker build --tag "$IMAGE_NAME" --cache-from "$IMAGE_NAME" .
        - (cd seaworthy; py.test -v --phoenix-image "$IMAGE_NAME" test.py)
      before_deploy:
        - pip install docker-ci-deploy===0.3.0
        - echo "$REGISTRY_PASS" | docker login -u "$REGISTRY_USER" --password-stdin
      deploy:
        provider: script
        script: dcd --version "$(git rev-parse --short HEAD)" --version-latest "$IMAGE_NAME"
        on:
          branch: develop
      after_success: []
